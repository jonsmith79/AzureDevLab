# File: .github/workflows/Intune.yml
on: 
  push:
    branches: [ main ]

name: IntuneConfiguration

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      #location: "uksouth"
      #DeploymentDir: "Intune"
      #adminUsername: ${{ secrets.ADMIN_USERNAME }}
      #adminPassword: ${{ secrets.ADMIN_PASSWORD }}
      #artifactsLocation: "https://raw.githubusercontent.com/jonsmith79/AzureDevLab/main/Deployments"
      #artifactsLocationSasToken: ""
      azGroupPrefix: "SG"
      azBreakGlassGroupName: "CA-BreakGlass"
      azBreakGlassGroupDescription: "Break Glass Group for Azure Conditional Access Policies"
      azBreakGlassAccountDisplayName: "Break Glass"
      azBreakGlassAccountUPN: "Break.Glass@e2d.co.uk"
      azBreakGlassAccountPwd: ${{ secrets.ADMIN_PASSWORD }}
      azGARoleDefinitionId: "62e90394-69f5-4237-9190-012177145e10"
      azSecureAdminsGroupName: "CA-SecureAdmins-All"
      azSecureAdminsGroupDescription: "Highly Secured Admins Group"        

    steps:
    # Checkout code
    - name: Checkout
      uses: actions/checkout@main

    # Log into Azure
    - name: 'Az CLI Login'
      uses: azure/login@v1
      with:
        client-id: ${{secrets.AZURE_CLIENT_ID}}
        tenant-id: ${{secrets.AZURE_TENANT_ID}}
        #subscription-id: ${{secrets.AZURE_SUBSCRIPTION_ID}}
        allow-no-subscriptions: true

    # Create Azure AD Break Glass Group with Azure CLI
    - name: 'Break Glass Group'
      run: |
        azBGGroupExists=$(az ad group list --display-name "${{env.azGroupPrefix}}-${{env.azBreakGlassGroupName}}" --query "[].id" --output tsv)
        if [ -z "$azBGGroupExists" ]; then
          az ad group create --display-name "${{env.azGroupPrefix}}-${{env.azBreakGlassGroupName}}" --mail-nickname "${{env.azGroupPrefix}}-${{env.azBreakGlassGroupName}}" --description "${{env.azBreakGlassGroupDescription}}"
        else
          echo "Group already exists"
        fi

    # Create Azure AD Break Glass Account with Azure CLI
    - name: 'Break Glass Account'
      run: |
        azBGUserExists=$(az ad user list --upn "${{env.azBreakGlassAccountUPN}}" --query "[].id" --output tsv)
        if [ -z "$azBGUserExists" ]; then
          az ad user create --display-name "${{env.azBreakGlassAccountDisplayName}}" --password "${{env.azBreakGlassAccountPwd}}" --user-principal-name "${{env.azBreakGlassAccountUPN}}" --force-change-password-next-sign-in false
        else
          echo "User already exists"
        fi

    # Add Break Glass Account to Break Glass Group with Azure CLI
    - name: 'Break Glass Account into Break Glass Group'
      run: |
        azBGGroupId=$(az ad group list --display-name "${{env.azGroupPrefix}}-${{env.azBreakGlassGroupName}}" --query "[].id" --output tsv)
        azBGUserId=$(az ad user list --upn "${{env.azBreakGlassAccountUPN}}" --query "[].id" --output tsv)
        azBGAlreadyMember=$(az ad group member check --group ${azBGGroupId} --member-id ${azBGUserId} --query "value" --output tsv)
        if [ "$azBGAlreadyMember" = "false" ]; then
          az ad group member add --group ${azBGGroupId} --member-id ${azBGUserId}
        else
          echo "User already a member of the group"
        fi

    # Add Break Glass Account to Azure AD Built-in role 'Global Admin' role with Azure CLI
    - name: 'Break Glass Account assign Global Admin role'
      run: |
        azBGUserId=$(az ad user list --upn "${{env.azBreakGlassAccountUPN}}" --query "[].id" --output tsv)
        URI=$(echo "https://graph.microsoft.com/beta/directoryRoles")
        user_role=$(echo "Global Administrator")
        roleDefinitionId=$(az rest --method GET --uri $URI --header Content-Type=application/json | jq --arg displayName "$user_role" '.value[] | select(.displayName | contains($displayName))' | jq '.id' -r)
        BODY=$( jq -n \
          --arg principalId "$azBGUserId" \
          --arg roleDefinitionId "$roleDefinitionId" \
          --arg directoryScopeId "/" \
          '{principalId: $principalId, roleDefinitionId: $roleDefinitionId, directoryScopeId: $directoryScopeId}'
        )
        uriRoleAssignment=$(echo "https://graph.microsoft.com/beta/roleManagement/directory/roleAssignments")
        azBGAlreadyGA=$(az rest --method GET --uri $uriRoleAssignment --header Content-Type=application/json | jq --arg principalId "$azBGUserId" --arg roleDefinitionId "${{env.azGARoleDefinitionId}}" '.value[] | select(.principalId | contains($principalId)) | select(.roleDefinitionId | contains($roleDefinitionId))' | jq '.id' -r)
        if [ -z "$azBGAlreadyGA" ]; then
          az rest --method POST --uri $uriRoleAssignment --header Content-Type=application/json --body "$BODY"
        else
          echo "User already a Global Admin"
        fi
  
    # Create Azure AD highly secure Admin Group with Azure CLI
    - name: 'Secured Admins Group'
      run: |
        azSAGroupExists=$(az ad group list --display-name "${{env.azGroupPrefix}}-${{env.azSecureAdminsGroupName}}" --query "[].id" --output tsv)
        if [ -z "$azSAGroupExists" ]; then
          az ad group create --display-name "${{env.azGroupPrefix}}-${{env.azSecureAdminsGroupName}}" --mail-nickname "${{env.azGroupPrefix}}-${{env.azSecureAdminsGroupName}}" --description "${{env.azSecureAdminsGroupDescription}}"
        else
          echo "Group already exists"
        fi

  

    # Az logout and security hardening
    - name: 'Az logout and security hardening'
      run: |
        az logout
        az cache purge
        az account clear  