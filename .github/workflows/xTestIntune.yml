# File: .github/workflows/Intune.yml
on: 
    push:
      branches: [ main ]
  
name: IntuneConfig
  
permissions:
    id-token: write # This is required for requesting the OIDC token (JWT) from Azure AD
    contents: read # This is required for actions/checkout
  
jobs:
  build-and-deploy:
    name: Build
    runs-on: ubuntu-latest
    env:
      azDomain: "e2d.co.uk"
      azGroups: '[{"name":"SG-CA-BreakGlass","description":"Break Glass Group for Azure Conditional Access Policies"},{"name":"SG-CA-SecureAdmins-All","description":"Highly Secured Admins Group for Azure Conditional Access"},{"name":"SG-GBL-M365-E5","description":"Group Based License group to assign the Microsoft 365 E5 licenses"},{"name":"SG-GBL-M365-E3","description":"Group Based License group to assign the Microsoft 365 E3 licenses"}]'
      azCloudOnlyUsers: '[{"fname":"John","sname":"Wick"},{"fname":"${{secrets.AZURE_BGFNAME}}","sname":"${{secrets.AZURE_BGSNAME}}"}]'
      azGroupMemberships: '[{"group":"SG-CA-Breakglass","upn":"${{secrets.AZURE_BGFNAME}}.${{secrets.AZURE_BGSNAME}}@e2d.co.uk"},{"group":"SG-CA-Breakglass","upn":"${{secrets.AZURE_GAUPN}}"}]' # Currently need to hard code the UPN domain name as you can't reference another env.variable
      azRoleAssignments: '[{"role":"Global Administrator","fname":"${{secrets.AZURE_BGFNAME}}","sname":"${{secrets.AZURE_BGSNAME}}"}]'

    steps:
      # Checkout the repo
      - name: Checkout
        uses: actions/checkout@main

      # Log into Azure
      - name: Az CLI Login
        uses: azure/login@v1
        with:
          client-id: ${{secrets.AZURE_CLIENT_ID}}
          tenant-id: ${{secrets.AZURE_TENANT_ID}}
          #subscription-id: ${{secrets.AZURE_SUBSCRIPTION_ID}}
          allow-no-subscriptions: true
          #enable-AzPSSession: true

      # Use BASH to loop through JSON array of groups and create group if it does not exist
      - name: Create Groups with BASH loop
        run: |
          echo $azGroups | jq -r '.[] | @base64' | while read item; do
            checkGroupExists=$(az ad group list --display-name $(echo $item | base64 --decode | jq -r '.name') --query "[].id" --output tsv)
            if [ -z "$checkGroupExists" ]; then
              az ad group create --display-name $(echo $item | base64 --decode | jq -r '.name') --description "$(echo $item | base64 --decode | jq -r '.description')" --mail-nickname $(echo $item | base64 --decode | jq -r '.name') --output none
              echo "Group $(echo $item | base64 --decode | jq -r '.name') created"
            else
              echo "Group $(echo $item | base64 --decode | jq -r '.name') already exists"
            fi
          done

      # Use BASH to loop through JSON array of users and create user if it does not exist
      - name: Create Cloud Only Users with BASH loop
        run: |
          echo $azCloudOnlyUsers | jq -r '.[] | @base64' | while read item; do
            checkUserExists=$(az ad user list --upn "$(echo $item | base64 --decode | jq -r '.fname').$(echo $item | base64 --decode | jq -r '.sname')@${{env.azDomain}}" --query "[].id" --output tsv)
            if [ -z "$checkUserExists" ]; then
              az ad user create --display-name "$(echo $item | base64 --decode | jq -r '.fname') $(echo $item | base64 --decode | jq -r '.sname')" --password "${{secrets.ADMIN_PASSWORD}}" --user-principal-name "$(echo $item | base64 --decode | jq -r '.fname').$(echo $item | base64 --decode | jq -r '.sname')@${{env.azDomain}}" --force-change-password-next-sign-in false --output none
              echo "User $(echo $item | base64 --decode | jq -r '.fname') $(echo $item | base64 --decode | jq -r '.sname') created"
            else
              echo "User $(echo $item | base64 --decode | jq -r '.fname') $(echo $item | base64 --decode | jq -r '.sname') already exists"
            fi
          done          
    
      # Use BASH to loop through JSON array of group memberships and add user to group if they are not already a member
      - name: Add Users to Groups with BASH loop
        run: |
          echo $azGroupMemberships | jq -r '.[] | @base64' | while read item; do
            azGroupId=$(az ad group list --display-name $(echo $item | base64 --decode | jq -r '.group') --query "[].id" --output tsv)
            azUserId=$(az ad user list --upn "$(echo $item | base64 --decode | jq -r '.upn')" --query "[].id" --output tsv)
            azAlreadyMember=$(az ad group member check --group ${azGroupId} --member-id ${azUserId} --query "value" --output tsv)
            if [ "$azAlreadyMember" = "false" ]; then
              az ad group member add --group ${azGroupId} --member-id ${azUserId}
              echo "User $(echo $item | base64 --decode | jq -r '.upn') added to group $(echo $item | base64 --decode | jq -r '.group')"
            else
              echo "User $(echo $item | base64 --decode | jq -r '.upn') already a member of group $(echo $item | base64 --decode | jq -r '.group')"
            fi
          done

      # Use BASH to loop through JSON array of role assignments and assign role to user if they are not already assigned
      - name: Assign roles to users with BASH loop
        run: |
          echo $azRoleAssignments | jq -r '.[] | @base64' | while read item; do
            azUserId=$(az ad user list --upn "$(echo $item | base64 --decode | jq -r '.fname').$(echo $item | base64 --decode | jq -r '.sname')@${{env.azDomain}}" --query "[].id" --output tsv)
            azRoleId=$(az rest --method GET --uri "https://graph.microsoft.com/beta/directoryRoles" --header Content-Type=application/json | jq --arg displayName "$(echo $item | base64 --decode | jq -r '.role')" '.value[] | select(.displayName | contains($displayName))' | jq '.id' -r)
            azAlreadyAssigned=$(az rest --method GET --uri "https://graph.microsoft.com/beta/roleManagement/directory/roleAssignments" --header Content-Type=application/json | jq --arg principalId "$azUserId" --arg roleDefinitionId "$azRoleId" '.value[] | select(.principalId | contains($azUserId)) | select(.roleDefinitionId | contains($AzRoleId))' | jq '.id' -r)
            if [ -z "$azAlreadyAssigned" ]; then
              az rest --method POST --uri "https://graph.microsoft.com/beta/roleManagement/directory/roleAssignments" --header Content-Type=application/json --body "{\"principalId\": \"$azUserId\", \"roleDefinitionId\": \"$azRoleId\", \"directoryScopeId\": \"/\"}"
              echo "User $(echo $item | base64 --decode | jq -r '.fname') $(echo $item | base64 --decode | jq -r '.sname') assigned role $(echo $item | base64 --decode | jq -r '.role')"
            else
              echo "User $(echo $item | base64 --decode | jq -r '.fname') $(echo $item | base64 --decode | jq -r '.sname') already assigned role $(echo $item | base64 --decode | jq -r '.role')"
            fi
          done





      # Logout of Azure session
      - name: Azure CLI Logout
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az cache purge
            az account clear
